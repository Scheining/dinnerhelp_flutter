// Mocks generated by Mockito 5.4.6 from annotations
// in homechef/test/features/notifications/domain/services/notification_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:homechef/core/error/failures.dart' as _i5;
import 'package:homechef/features/notifications/data/services/onesignal_service.dart'
    as _i8;
import 'package:homechef/features/notifications/data/services/postmark_service.dart'
    as _i7;
import 'package:homechef/features/notifications/domain/entities/notification.dart'
    as _i6;
import 'package:homechef/features/notifications/domain/repositories/notification_repository.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [NotificationRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockNotificationRepository extends _i1.Mock
    implements _i3.NotificationRepository {
  MockNotificationRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<
      _i2.Either<_i5.Failure, _i6.NotificationEntity>> createNotification(
          _i6.NotificationRequest? request) =>
      (super.noSuchMethod(
        Invocation.method(
          #createNotification,
          [request],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, _i6.NotificationEntity>>.value(
                _FakeEither_0<_i5.Failure, _i6.NotificationEntity>(
          this,
          Invocation.method(
            #createNotification,
            [request],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.NotificationEntity>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.NotificationEntity>>>
      getUserNotifications(
    String? userId, {
    int? limit = 50,
    int? offset = 0,
  }) =>
          (super.noSuchMethod(
            Invocation.method(
              #getUserNotifications,
              [userId],
              {
                #limit: limit,
                #offset: offset,
              },
            ),
            returnValue: _i4.Future<
                    _i2
                    .Either<_i5.Failure, List<_i6.NotificationEntity>>>.value(
                _FakeEither_0<_i5.Failure, List<_i6.NotificationEntity>>(
              this,
              Invocation.method(
                #getUserNotifications,
                [userId],
                {
                  #limit: limit,
                  #offset: offset,
                },
              ),
            )),
          ) as _i4
              .Future<_i2.Either<_i5.Failure, List<_i6.NotificationEntity>>>);

  @override
  _i4.Future<
      _i2.Either<_i5.Failure, _i6.NotificationEntity>> updateNotificationStatus(
    String? notificationId,
    _i6.NotificationStatus? status, {
    String? failureReason,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateNotificationStatus,
          [
            notificationId,
            status,
          ],
          {#failureReason: failureReason},
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, _i6.NotificationEntity>>.value(
                _FakeEither_0<_i5.Failure, _i6.NotificationEntity>(
          this,
          Invocation.method(
            #updateNotificationStatus,
            [
              notificationId,
              status,
            ],
            {#failureReason: failureReason},
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.NotificationEntity>>);

  @override
  _i4.Future<
      _i2.Either<_i5.Failure, _i6.NotificationPreferences>> getUserPreferences(
          String? userId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getUserPreferences,
          [userId],
        ),
        returnValue: _i4
            .Future<_i2.Either<_i5.Failure, _i6.NotificationPreferences>>.value(
            _FakeEither_0<_i5.Failure, _i6.NotificationPreferences>(
          this,
          Invocation.method(
            #getUserPreferences,
            [userId],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.NotificationPreferences>>);

  @override
  _i4.Future<
      _i2
      .Either<_i5.Failure, _i6.NotificationPreferences>> updateUserPreferences(
    String? userId,
    _i6.NotificationPreferences? preferences,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateUserPreferences,
          [
            userId,
            preferences,
          ],
        ),
        returnValue: _i4
            .Future<_i2.Either<_i5.Failure, _i6.NotificationPreferences>>.value(
            _FakeEither_0<_i5.Failure, _i6.NotificationPreferences>(
          this,
          Invocation.method(
            #updateUserPreferences,
            [
              userId,
              preferences,
            ],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.NotificationPreferences>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, void>> scheduleNotification(
    String? notificationId,
    DateTime? scheduledFor,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #scheduleNotification,
          [
            notificationId,
            scheduledFor,
          ],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, void>>.value(
            _FakeEither_0<_i5.Failure, void>(
          this,
          Invocation.method(
            #scheduleNotification,
            [
              notificationId,
              scheduledFor,
            ],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, void>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.NotificationEntity>>>
      getPendingNotifications() => (super.noSuchMethod(
            Invocation.method(
              #getPendingNotifications,
              [],
            ),
            returnValue: _i4.Future<
                    _i2
                    .Either<_i5.Failure, List<_i6.NotificationEntity>>>.value(
                _FakeEither_0<_i5.Failure, List<_i6.NotificationEntity>>(
              this,
              Invocation.method(
                #getPendingNotifications,
                [],
              ),
            )),
          ) as _i4
              .Future<_i2.Either<_i5.Failure, List<_i6.NotificationEntity>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, void>> markAsRead(
          String? notificationId) =>
      (super.noSuchMethod(
        Invocation.method(
          #markAsRead,
          [notificationId],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, void>>.value(
            _FakeEither_0<_i5.Failure, void>(
          this,
          Invocation.method(
            #markAsRead,
            [notificationId],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, void>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, void>> markAllAsRead(String? userId) =>
      (super.noSuchMethod(
        Invocation.method(
          #markAllAsRead,
          [userId],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, void>>.value(
            _FakeEither_0<_i5.Failure, void>(
          this,
          Invocation.method(
            #markAllAsRead,
            [userId],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, void>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.DeviceToken>> registerDeviceToken(
    String? userId,
    String? token,
    String? platform, {
    String? appVersion,
    String? deviceId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #registerDeviceToken,
          [
            userId,
            token,
            platform,
          ],
          {
            #appVersion: appVersion,
            #deviceId: deviceId,
          },
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.DeviceToken>>.value(
            _FakeEither_0<_i5.Failure, _i6.DeviceToken>(
          this,
          Invocation.method(
            #registerDeviceToken,
            [
              userId,
              token,
              platform,
            ],
            {
              #appVersion: appVersion,
              #deviceId: deviceId,
            },
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.DeviceToken>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, void>> deregisterDeviceToken(
          String? token) =>
      (super.noSuchMethod(
        Invocation.method(
          #deregisterDeviceToken,
          [token],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, void>>.value(
            _FakeEither_0<_i5.Failure, void>(
          this,
          Invocation.method(
            #deregisterDeviceToken,
            [token],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, void>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.DeviceToken>>>
      getUserDeviceTokens(String? userId) => (super.noSuchMethod(
            Invocation.method(
              #getUserDeviceTokens,
              [userId],
            ),
            returnValue: _i4
                .Future<_i2.Either<_i5.Failure, List<_i6.DeviceToken>>>.value(
                _FakeEither_0<_i5.Failure, List<_i6.DeviceToken>>(
              this,
              Invocation.method(
                #getUserDeviceTokens,
                [userId],
              ),
            )),
          ) as _i4.Future<_i2.Either<_i5.Failure, List<_i6.DeviceToken>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.EmailTemplate>> getEmailTemplate(
          String? templateKey) =>
      (super.noSuchMethod(
        Invocation.method(
          #getEmailTemplate,
          [templateKey],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, _i6.EmailTemplate>>.value(
                _FakeEither_0<_i5.Failure, _i6.EmailTemplate>(
          this,
          Invocation.method(
            #getEmailTemplate,
            [templateKey],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.EmailTemplate>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.RecurringNotification>>>
      getRecurringNotifications(String? bookingSeriesId) => (super.noSuchMethod(
            Invocation.method(
              #getRecurringNotifications,
              [bookingSeriesId],
            ),
            returnValue: _i4.Future<
                    _i2.Either<_i5.Failure,
                        List<_i6.RecurringNotification>>>.value(
                _FakeEither_0<_i5.Failure, List<_i6.RecurringNotification>>(
              this,
              Invocation.method(
                #getRecurringNotifications,
                [bookingSeriesId],
              ),
            )),
          ) as _i4.Future<
              _i2.Either<_i5.Failure, List<_i6.RecurringNotification>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.RecurringNotification>>
      createRecurringNotification(_i6.RecurringNotification? notification) =>
          (super.noSuchMethod(
            Invocation.method(
              #createRecurringNotification,
              [notification],
            ),
            returnValue: _i4.Future<
                    _i2.Either<_i5.Failure, _i6.RecurringNotification>>.value(
                _FakeEither_0<_i5.Failure, _i6.RecurringNotification>(
              this,
              Invocation.method(
                #createRecurringNotification,
                [notification],
              ),
            )),
          ) as _i4.Future<_i2.Either<_i5.Failure, _i6.RecurringNotification>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, void>> markRecurringNotificationSent(
          String? notificationId) =>
      (super.noSuchMethod(
        Invocation.method(
          #markRecurringNotificationSent,
          [notificationId],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, void>>.value(
            _FakeEither_0<_i5.Failure, void>(
          this,
          Invocation.method(
            #markRecurringNotificationSent,
            [notificationId],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, void>>);
}

/// A class which mocks [EmailService].
///
/// See the documentation for Mockito's code generation for more information.
class MockEmailService extends _i1.Mock implements _i7.EmailService {
  MockEmailService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, void>> sendEmailNotification(
          _i6.NotificationEntity? notification) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendEmailNotification,
          [notification],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, void>>.value(
            _FakeEither_0<_i5.Failure, void>(
          this,
          Invocation.method(
            #sendEmailNotification,
            [notification],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, void>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, void>> sendTemplateEmail({
    required String? to,
    required String? templateKey,
    required Map<String, dynamic>? templateModel,
    required String? language,
    String? fromEmail,
    String? fromName,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendTemplateEmail,
          [],
          {
            #to: to,
            #templateKey: templateKey,
            #templateModel: templateModel,
            #language: language,
            #fromEmail: fromEmail,
            #fromName: fromName,
          },
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, void>>.value(
            _FakeEither_0<_i5.Failure, void>(
          this,
          Invocation.method(
            #sendTemplateEmail,
            [],
            {
              #to: to,
              #templateKey: templateKey,
              #templateModel: templateModel,
              #language: language,
              #fromEmail: fromEmail,
              #fromName: fromName,
            },
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, void>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, void>> sendTransactionalEmail({
    required String? to,
    required String? subject,
    required String? htmlBody,
    String? textBody,
    String? fromEmail,
    String? fromName,
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendTransactionalEmail,
          [],
          {
            #to: to,
            #subject: subject,
            #htmlBody: htmlBody,
            #textBody: textBody,
            #fromEmail: fromEmail,
            #fromName: fromName,
            #headers: headers,
          },
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, void>>.value(
            _FakeEither_0<_i5.Failure, void>(
          this,
          Invocation.method(
            #sendTransactionalEmail,
            [],
            {
              #to: to,
              #subject: subject,
              #htmlBody: htmlBody,
              #textBody: textBody,
              #fromEmail: fromEmail,
              #fromName: fromName,
              #headers: headers,
            },
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, void>>);
}

/// A class which mocks [PushNotificationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockPushNotificationService extends _i1.Mock
    implements _i8.PushNotificationService {
  MockPushNotificationService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, void>> initialize() => (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, void>>.value(
            _FakeEither_0<_i5.Failure, void>(
          this,
          Invocation.method(
            #initialize,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, void>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, String?>> getDeviceToken() =>
      (super.noSuchMethod(
        Invocation.method(
          #getDeviceToken,
          [],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, String?>>.value(
            _FakeEither_0<_i5.Failure, String?>(
          this,
          Invocation.method(
            #getDeviceToken,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, String?>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, void>> registerDevice(
    String? userId,
    String? token,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #registerDevice,
          [
            userId,
            token,
          ],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, void>>.value(
            _FakeEither_0<_i5.Failure, void>(
          this,
          Invocation.method(
            #registerDevice,
            [
              userId,
              token,
            ],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, void>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, void>> unregisterDevice(String? token) =>
      (super.noSuchMethod(
        Invocation.method(
          #unregisterDevice,
          [token],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, void>>.value(
            _FakeEither_0<_i5.Failure, void>(
          this,
          Invocation.method(
            #unregisterDevice,
            [token],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, void>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, void>> sendPushNotification(
          _i6.NotificationEntity? notification) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendPushNotification,
          [notification],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, void>>.value(
            _FakeEither_0<_i5.Failure, void>(
          this,
          Invocation.method(
            #sendPushNotification,
            [notification],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, void>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, void>> sendToUser(
    String? userId,
    String? title,
    String? message,
    Map<String, dynamic>? data,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendToUser,
          [
            userId,
            title,
            message,
            data,
          ],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, void>>.value(
            _FakeEither_0<_i5.Failure, void>(
          this,
          Invocation.method(
            #sendToUser,
            [
              userId,
              title,
              message,
              data,
            ],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, void>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, void>> sendToMultipleUsers(
    List<String>? userIds,
    String? title,
    String? message,
    Map<String, dynamic>? data,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendToMultipleUsers,
          [
            userIds,
            title,
            message,
            data,
          ],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, void>>.value(
            _FakeEither_0<_i5.Failure, void>(
          this,
          Invocation.method(
            #sendToMultipleUsers,
            [
              userIds,
              title,
              message,
              data,
            ],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, void>>);
}
