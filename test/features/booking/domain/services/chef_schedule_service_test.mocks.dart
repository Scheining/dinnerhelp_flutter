// Mocks generated by Mockito 5.4.6 from annotations
// in homechef/test/features/booking/domain/services/chef_schedule_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:homechef/core/error/failures.dart' as _i5;
import 'package:homechef/features/booking/domain/entities/chef_availability.dart'
    as _i7;
import 'package:homechef/features/booking/domain/entities/chef_schedule_settings.dart'
    as _i9;
import 'package:homechef/features/booking/domain/entities/chef_time_off.dart'
    as _i8;
import 'package:homechef/features/booking/domain/entities/chef_working_hours.dart'
    as _i6;
import 'package:homechef/features/booking/domain/repositories/chef_schedule_repository.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ChefScheduleRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockChefScheduleRepository extends _i1.Mock
    implements _i3.ChefScheduleRepository {
  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.ChefWorkingHours?>> getWorkingHours({
    required String? chefId,
    required int? dayOfWeek,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getWorkingHours,
          [],
          {
            #chefId: chefId,
            #dayOfWeek: dayOfWeek,
          },
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, _i6.ChefWorkingHours?>>.value(
                _FakeEither_0<_i5.Failure, _i6.ChefWorkingHours?>(
          this,
          Invocation.method(
            #getWorkingHours,
            [],
            {
              #chefId: chefId,
              #dayOfWeek: dayOfWeek,
            },
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, _i6.ChefWorkingHours?>>.value(
                _FakeEither_0<_i5.Failure, _i6.ChefWorkingHours?>(
          this,
          Invocation.method(
            #getWorkingHours,
            [],
            {
              #chefId: chefId,
              #dayOfWeek: dayOfWeek,
            },
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.ChefWorkingHours?>>);

  @override
  _i4.Future<
      _i2.Either<_i5.Failure, List<_i6.ChefWorkingHours>>> getAllWorkingHours(
          {required String? chefId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllWorkingHours,
          [],
          {#chefId: chefId},
        ),
        returnValue: _i4
            .Future<_i2.Either<_i5.Failure, List<_i6.ChefWorkingHours>>>.value(
            _FakeEither_0<_i5.Failure, List<_i6.ChefWorkingHours>>(
          this,
          Invocation.method(
            #getAllWorkingHours,
            [],
            {#chefId: chefId},
          ),
        )),
        returnValueForMissingStub: _i4
            .Future<_i2.Either<_i5.Failure, List<_i6.ChefWorkingHours>>>.value(
            _FakeEither_0<_i5.Failure, List<_i6.ChefWorkingHours>>(
          this,
          Invocation.method(
            #getAllWorkingHours,
            [],
            {#chefId: chefId},
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, List<_i6.ChefWorkingHours>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i7.ChefAvailability>>>
      getSpecificAvailability({
    required String? chefId,
    required DateTime? startDate,
    required DateTime? endDate,
  }) =>
          (super.noSuchMethod(
            Invocation.method(
              #getSpecificAvailability,
              [],
              {
                #chefId: chefId,
                #startDate: startDate,
                #endDate: endDate,
              },
            ),
            returnValue: _i4.Future<
                    _i2.Either<_i5.Failure, List<_i7.ChefAvailability>>>.value(
                _FakeEither_0<_i5.Failure, List<_i7.ChefAvailability>>(
              this,
              Invocation.method(
                #getSpecificAvailability,
                [],
                {
                  #chefId: chefId,
                  #startDate: startDate,
                  #endDate: endDate,
                },
              ),
            )),
            returnValueForMissingStub: _i4.Future<
                    _i2.Either<_i5.Failure, List<_i7.ChefAvailability>>>.value(
                _FakeEither_0<_i5.Failure, List<_i7.ChefAvailability>>(
              this,
              Invocation.method(
                #getSpecificAvailability,
                [],
                {
                  #chefId: chefId,
                  #startDate: startDate,
                  #endDate: endDate,
                },
              ),
            )),
          ) as _i4.Future<_i2.Either<_i5.Failure, List<_i7.ChefAvailability>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i8.ChefTimeOff>>> getTimeOffPeriods({
    required String? chefId,
    required DateTime? startDate,
    required DateTime? endDate,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTimeOffPeriods,
          [],
          {
            #chefId: chefId,
            #startDate: startDate,
            #endDate: endDate,
          },
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, List<_i8.ChefTimeOff>>>.value(
                _FakeEither_0<_i5.Failure, List<_i8.ChefTimeOff>>(
          this,
          Invocation.method(
            #getTimeOffPeriods,
            [],
            {
              #chefId: chefId,
              #startDate: startDate,
              #endDate: endDate,
            },
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, List<_i8.ChefTimeOff>>>.value(
                _FakeEither_0<_i5.Failure, List<_i8.ChefTimeOff>>(
          this,
          Invocation.method(
            #getTimeOffPeriods,
            [],
            {
              #chefId: chefId,
              #startDate: startDate,
              #endDate: endDate,
            },
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, List<_i8.ChefTimeOff>>>);

  @override
  _i4.Future<
      _i2.Either<_i5.Failure, _i9.ChefScheduleSettings>> getScheduleSettings(
          {required String? chefId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getScheduleSettings,
          [],
          {#chefId: chefId},
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, _i9.ChefScheduleSettings>>.value(
                _FakeEither_0<_i5.Failure, _i9.ChefScheduleSettings>(
          this,
          Invocation.method(
            #getScheduleSettings,
            [],
            {#chefId: chefId},
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, _i9.ChefScheduleSettings>>.value(
                _FakeEither_0<_i5.Failure, _i9.ChefScheduleSettings>(
          this,
          Invocation.method(
            #getScheduleSettings,
            [],
            {#chefId: chefId},
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i9.ChefScheduleSettings>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, void>> updateWorkingHours({
    required String? chefId,
    required List<_i6.ChefWorkingHours>? workingHours,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateWorkingHours,
          [],
          {
            #chefId: chefId,
            #workingHours: workingHours,
          },
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, void>>.value(
            _FakeEither_0<_i5.Failure, void>(
          this,
          Invocation.method(
            #updateWorkingHours,
            [],
            {
              #chefId: chefId,
              #workingHours: workingHours,
            },
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, void>>.value(
                _FakeEither_0<_i5.Failure, void>(
          this,
          Invocation.method(
            #updateWorkingHours,
            [],
            {
              #chefId: chefId,
              #workingHours: workingHours,
            },
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, void>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, void>> addTimeOff({
    required String? chefId,
    required _i8.ChefTimeOff? timeOff,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #addTimeOff,
          [],
          {
            #chefId: chefId,
            #timeOff: timeOff,
          },
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, void>>.value(
            _FakeEither_0<_i5.Failure, void>(
          this,
          Invocation.method(
            #addTimeOff,
            [],
            {
              #chefId: chefId,
              #timeOff: timeOff,
            },
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, void>>.value(
                _FakeEither_0<_i5.Failure, void>(
          this,
          Invocation.method(
            #addTimeOff,
            [],
            {
              #chefId: chefId,
              #timeOff: timeOff,
            },
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, void>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, void>> updateScheduleSettings({
    required String? chefId,
    required _i9.ChefScheduleSettings? settings,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateScheduleSettings,
          [],
          {
            #chefId: chefId,
            #settings: settings,
          },
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, void>>.value(
            _FakeEither_0<_i5.Failure, void>(
          this,
          Invocation.method(
            #updateScheduleSettings,
            [],
            {
              #chefId: chefId,
              #settings: settings,
            },
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, void>>.value(
                _FakeEither_0<_i5.Failure, void>(
          this,
          Invocation.method(
            #updateScheduleSettings,
            [],
            {
              #chefId: chefId,
              #settings: settings,
            },
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, void>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, void>> addSpecificAvailability({
    required String? chefId,
    required _i7.ChefAvailability? availability,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #addSpecificAvailability,
          [],
          {
            #chefId: chefId,
            #availability: availability,
          },
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, void>>.value(
            _FakeEither_0<_i5.Failure, void>(
          this,
          Invocation.method(
            #addSpecificAvailability,
            [],
            {
              #chefId: chefId,
              #availability: availability,
            },
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, void>>.value(
                _FakeEither_0<_i5.Failure, void>(
          this,
          Invocation.method(
            #addSpecificAvailability,
            [],
            {
              #chefId: chefId,
              #availability: availability,
            },
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, void>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, void>> removeTimeOff({
    required String? chefId,
    required String? timeOffId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeTimeOff,
          [],
          {
            #chefId: chefId,
            #timeOffId: timeOffId,
          },
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, void>>.value(
            _FakeEither_0<_i5.Failure, void>(
          this,
          Invocation.method(
            #removeTimeOff,
            [],
            {
              #chefId: chefId,
              #timeOffId: timeOffId,
            },
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, void>>.value(
                _FakeEither_0<_i5.Failure, void>(
          this,
          Invocation.method(
            #removeTimeOff,
            [],
            {
              #chefId: chefId,
              #timeOffId: timeOffId,
            },
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, void>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, bool>> isWorkingDay({
    required String? chefId,
    required DateTime? date,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #isWorkingDay,
          [],
          {
            #chefId: chefId,
            #date: date,
          },
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, bool>>.value(
            _FakeEither_0<_i5.Failure, bool>(
          this,
          Invocation.method(
            #isWorkingDay,
            [],
            {
              #chefId: chefId,
              #date: date,
            },
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, bool>>.value(
                _FakeEither_0<_i5.Failure, bool>(
          this,
          Invocation.method(
            #isWorkingDay,
            [],
            {
              #chefId: chefId,
              #date: date,
            },
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, bool>>);
}
