// Mocks generated by Mockito 5.4.6 from annotations
// in homechef/test/features/booking/domain/services/recurring_booking_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:homechef/core/error/failures.dart' as _i5;
import 'package:homechef/features/booking/domain/entities/booking_occurrence.dart'
    as _i8;
import 'package:homechef/features/booking/domain/entities/booking_request.dart'
    as _i7;
import 'package:homechef/features/booking/domain/entities/recurrence_pattern.dart'
    as _i6;
import 'package:homechef/features/booking/domain/entities/time_slot.dart'
    as _i10;
import 'package:homechef/features/booking/domain/repositories/booking_availability_repository.dart'
    as _i9;
import 'package:homechef/features/booking/domain/repositories/recurring_booking_repository.dart'
    as _i3;
import 'package:homechef/features/booking/domain/services/booking_availability_service.dart'
    as _i11;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [RecurringBookingRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockRecurringBookingRepository extends _i1.Mock
    implements _i3.RecurringBookingRepository {
  @override
  _i4.Future<_i2.Either<_i5.Failure, bool>> validateRecurringBookingPattern({
    required String? chefId,
    required _i6.RecurrencePattern? pattern,
    required String? startTime,
    required String? endTime,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #validateRecurringBookingPattern,
          [],
          {
            #chefId: chefId,
            #pattern: pattern,
            #startTime: startTime,
            #endTime: endTime,
          },
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, bool>>.value(
            _FakeEither_0<_i5.Failure, bool>(
          this,
          Invocation.method(
            #validateRecurringBookingPattern,
            [],
            {
              #chefId: chefId,
              #pattern: pattern,
              #startTime: startTime,
              #endTime: endTime,
            },
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, bool>>.value(
                _FakeEither_0<_i5.Failure, bool>(
          this,
          Invocation.method(
            #validateRecurringBookingPattern,
            [],
            {
              #chefId: chefId,
              #pattern: pattern,
              #startTime: startTime,
              #endTime: endTime,
            },
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, bool>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<DateTime>>> checkRecurringConflicts({
    required String? chefId,
    required List<DateTime>? occurrences,
    required String? startTime,
    required String? endTime,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #checkRecurringConflicts,
          [],
          {
            #chefId: chefId,
            #occurrences: occurrences,
            #startTime: startTime,
            #endTime: endTime,
          },
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, List<DateTime>>>.value(
            _FakeEither_0<_i5.Failure, List<DateTime>>(
          this,
          Invocation.method(
            #checkRecurringConflicts,
            [],
            {
              #chefId: chefId,
              #occurrences: occurrences,
              #startTime: startTime,
              #endTime: endTime,
            },
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, List<DateTime>>>.value(
                _FakeEither_0<_i5.Failure, List<DateTime>>(
          this,
          Invocation.method(
            #checkRecurringConflicts,
            [],
            {
              #chefId: chefId,
              #occurrences: occurrences,
              #startTime: startTime,
              #endTime: endTime,
            },
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, List<DateTime>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, String>> createRecurringSeries({
    required _i7.BookingRequest? bookingRequest,
    required _i6.RecurrencePattern? pattern,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createRecurringSeries,
          [],
          {
            #bookingRequest: bookingRequest,
            #pattern: pattern,
          },
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, String>>.value(
            _FakeEither_0<_i5.Failure, String>(
          this,
          Invocation.method(
            #createRecurringSeries,
            [],
            {
              #bookingRequest: bookingRequest,
              #pattern: pattern,
            },
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, String>>.value(
                _FakeEither_0<_i5.Failure, String>(
          this,
          Invocation.method(
            #createRecurringSeries,
            [],
            {
              #bookingRequest: bookingRequest,
              #pattern: pattern,
            },
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, String>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i3.RecurringBookingSeries>>>
      getChefRecurringSeries({
    required String? chefId,
    bool? activeOnly,
  }) =>
          (super.noSuchMethod(
            Invocation.method(
              #getChefRecurringSeries,
              [],
              {
                #chefId: chefId,
                #activeOnly: activeOnly,
              },
            ),
            returnValue: _i4.Future<
                    _i2.Either<_i5.Failure,
                        List<_i3.RecurringBookingSeries>>>.value(
                _FakeEither_0<_i5.Failure, List<_i3.RecurringBookingSeries>>(
              this,
              Invocation.method(
                #getChefRecurringSeries,
                [],
                {
                  #chefId: chefId,
                  #activeOnly: activeOnly,
                },
              ),
            )),
            returnValueForMissingStub: _i4.Future<
                    _i2.Either<_i5.Failure,
                        List<_i3.RecurringBookingSeries>>>.value(
                _FakeEither_0<_i5.Failure, List<_i3.RecurringBookingSeries>>(
              this,
              Invocation.method(
                #getChefRecurringSeries,
                [],
                {
                  #chefId: chefId,
                  #activeOnly: activeOnly,
                },
              ),
            )),
          ) as _i4.Future<
              _i2.Either<_i5.Failure, List<_i3.RecurringBookingSeries>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i3.RecurringBookingSeries>>>
      getUserRecurringSeries({
    required String? userId,
    bool? activeOnly,
  }) =>
          (super.noSuchMethod(
            Invocation.method(
              #getUserRecurringSeries,
              [],
              {
                #userId: userId,
                #activeOnly: activeOnly,
              },
            ),
            returnValue: _i4.Future<
                    _i2.Either<_i5.Failure,
                        List<_i3.RecurringBookingSeries>>>.value(
                _FakeEither_0<_i5.Failure, List<_i3.RecurringBookingSeries>>(
              this,
              Invocation.method(
                #getUserRecurringSeries,
                [],
                {
                  #userId: userId,
                  #activeOnly: activeOnly,
                },
              ),
            )),
            returnValueForMissingStub: _i4.Future<
                    _i2.Either<_i5.Failure,
                        List<_i3.RecurringBookingSeries>>>.value(
                _FakeEither_0<_i5.Failure, List<_i3.RecurringBookingSeries>>(
              this,
              Invocation.method(
                #getUserRecurringSeries,
                [],
                {
                  #userId: userId,
                  #activeOnly: activeOnly,
                },
              ),
            )),
          ) as _i4.Future<
              _i2.Either<_i5.Failure, List<_i3.RecurringBookingSeries>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, void>> cancelRecurringSeries({
    required String? seriesId,
    required _i3.CancellationType? cancellationType,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #cancelRecurringSeries,
          [],
          {
            #seriesId: seriesId,
            #cancellationType: cancellationType,
          },
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, void>>.value(
            _FakeEither_0<_i5.Failure, void>(
          this,
          Invocation.method(
            #cancelRecurringSeries,
            [],
            {
              #seriesId: seriesId,
              #cancellationType: cancellationType,
            },
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, void>>.value(
                _FakeEither_0<_i5.Failure, void>(
          this,
          Invocation.method(
            #cancelRecurringSeries,
            [],
            {
              #seriesId: seriesId,
              #cancellationType: cancellationType,
            },
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, void>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i8.BookingOccurrence>>>
      getFutureBookingsInSeries(String? seriesId) => (super.noSuchMethod(
            Invocation.method(
              #getFutureBookingsInSeries,
              [seriesId],
            ),
            returnValue: _i4.Future<
                    _i2.Either<_i5.Failure, List<_i8.BookingOccurrence>>>.value(
                _FakeEither_0<_i5.Failure, List<_i8.BookingOccurrence>>(
              this,
              Invocation.method(
                #getFutureBookingsInSeries,
                [seriesId],
              ),
            )),
            returnValueForMissingStub: _i4.Future<
                    _i2.Either<_i5.Failure, List<_i8.BookingOccurrence>>>.value(
                _FakeEither_0<_i5.Failure, List<_i8.BookingOccurrence>>(
              this,
              Invocation.method(
                #getFutureBookingsInSeries,
                [seriesId],
              ),
            )),
          ) as _i4
              .Future<_i2.Either<_i5.Failure, List<_i8.BookingOccurrence>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, void>> modifyRecurringSeries({
    required String? seriesId,
    required _i3.RecurringSeriesModification? modifications,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #modifyRecurringSeries,
          [],
          {
            #seriesId: seriesId,
            #modifications: modifications,
          },
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, void>>.value(
            _FakeEither_0<_i5.Failure, void>(
          this,
          Invocation.method(
            #modifyRecurringSeries,
            [],
            {
              #seriesId: seriesId,
              #modifications: modifications,
            },
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, void>>.value(
                _FakeEither_0<_i5.Failure, void>(
          this,
          Invocation.method(
            #modifyRecurringSeries,
            [],
            {
              #seriesId: seriesId,
              #modifications: modifications,
            },
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, void>>);

  @override
  _i4.Future<
      _i2
      .Either<_i5.Failure, List<_i8.BookingOccurrence>>> getSeriesOccurrences(
          {required String? seriesId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSeriesOccurrences,
          [],
          {#seriesId: seriesId},
        ),
        returnValue: _i4
            .Future<_i2.Either<_i5.Failure, List<_i8.BookingOccurrence>>>.value(
            _FakeEither_0<_i5.Failure, List<_i8.BookingOccurrence>>(
          this,
          Invocation.method(
            #getSeriesOccurrences,
            [],
            {#seriesId: seriesId},
          ),
        )),
        returnValueForMissingStub: _i4
            .Future<_i2.Either<_i5.Failure, List<_i8.BookingOccurrence>>>.value(
            _FakeEither_0<_i5.Failure, List<_i8.BookingOccurrence>>(
          this,
          Invocation.method(
            #getSeriesOccurrences,
            [],
            {#seriesId: seriesId},
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, List<_i8.BookingOccurrence>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, void>> cancelSeriesOccurrence({
    required String? seriesId,
    required String? occurrenceId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #cancelSeriesOccurrence,
          [],
          {
            #seriesId: seriesId,
            #occurrenceId: occurrenceId,
          },
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, void>>.value(
            _FakeEither_0<_i5.Failure, void>(
          this,
          Invocation.method(
            #cancelSeriesOccurrence,
            [],
            {
              #seriesId: seriesId,
              #occurrenceId: occurrenceId,
            },
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, void>>.value(
                _FakeEither_0<_i5.Failure, void>(
          this,
          Invocation.method(
            #cancelSeriesOccurrence,
            [],
            {
              #seriesId: seriesId,
              #occurrenceId: occurrenceId,
            },
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, void>>);

  @override
  _i4.Future<
      _i2.Either<_i5.Failure, List<_i8.BookingOccurrence>>> getBookingsByDates(
    String? seriesId,
    List<DateTime>? dates,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getBookingsByDates,
          [
            seriesId,
            dates,
          ],
        ),
        returnValue: _i4
            .Future<_i2.Either<_i5.Failure, List<_i8.BookingOccurrence>>>.value(
            _FakeEither_0<_i5.Failure, List<_i8.BookingOccurrence>>(
          this,
          Invocation.method(
            #getBookingsByDates,
            [
              seriesId,
              dates,
            ],
          ),
        )),
        returnValueForMissingStub: _i4
            .Future<_i2.Either<_i5.Failure, List<_i8.BookingOccurrence>>>.value(
            _FakeEither_0<_i5.Failure, List<_i8.BookingOccurrence>>(
          this,
          Invocation.method(
            #getBookingsByDates,
            [
              seriesId,
              dates,
            ],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, List<_i8.BookingOccurrence>>>);
}

/// A class which mocks [BookingAvailabilityRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockBookingAvailabilityRepository extends _i1.Mock
    implements _i9.BookingAvailabilityRepository {
  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i10.TimeSlot>>>
      getAvailableTimeSlots({
    required String? chefId,
    required DateTime? date,
    required Duration? duration,
    required int? numberOfGuests,
  }) =>
          (super.noSuchMethod(
            Invocation.method(
              #getAvailableTimeSlots,
              [],
              {
                #chefId: chefId,
                #date: date,
                #duration: duration,
                #numberOfGuests: numberOfGuests,
              },
            ),
            returnValue:
                _i4.Future<_i2.Either<_i5.Failure, List<_i10.TimeSlot>>>.value(
                    _FakeEither_0<_i5.Failure, List<_i10.TimeSlot>>(
              this,
              Invocation.method(
                #getAvailableTimeSlots,
                [],
                {
                  #chefId: chefId,
                  #date: date,
                  #duration: duration,
                  #numberOfGuests: numberOfGuests,
                },
              ),
            )),
            returnValueForMissingStub:
                _i4.Future<_i2.Either<_i5.Failure, List<_i10.TimeSlot>>>.value(
                    _FakeEither_0<_i5.Failure, List<_i10.TimeSlot>>(
              this,
              Invocation.method(
                #getAvailableTimeSlots,
                [],
                {
                  #chefId: chefId,
                  #date: date,
                  #duration: duration,
                  #numberOfGuests: numberOfGuests,
                },
              ),
            )),
          ) as _i4.Future<_i2.Either<_i5.Failure, List<_i10.TimeSlot>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, bool>> checkBookingConflict({
    required String? chefId,
    required DateTime? date,
    required String? startTime,
    required String? endTime,
    String? excludeBookingId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #checkBookingConflict,
          [],
          {
            #chefId: chefId,
            #date: date,
            #startTime: startTime,
            #endTime: endTime,
            #excludeBookingId: excludeBookingId,
          },
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, bool>>.value(
            _FakeEither_0<_i5.Failure, bool>(
          this,
          Invocation.method(
            #checkBookingConflict,
            [],
            {
              #chefId: chefId,
              #date: date,
              #startTime: startTime,
              #endTime: endTime,
              #excludeBookingId: excludeBookingId,
            },
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, bool>>.value(
                _FakeEither_0<_i5.Failure, bool>(
          this,
          Invocation.method(
            #checkBookingConflict,
            [],
            {
              #chefId: chefId,
              #date: date,
              #startTime: startTime,
              #endTime: endTime,
              #excludeBookingId: excludeBookingId,
            },
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, bool>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, bool>> validateBookingRequest(
          {required _i7.BookingRequest? bookingRequest}) =>
      (super.noSuchMethod(
        Invocation.method(
          #validateBookingRequest,
          [],
          {#bookingRequest: bookingRequest},
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, bool>>.value(
            _FakeEither_0<_i5.Failure, bool>(
          this,
          Invocation.method(
            #validateBookingRequest,
            [],
            {#bookingRequest: bookingRequest},
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, bool>>.value(
                _FakeEither_0<_i5.Failure, bool>(
          this,
          Invocation.method(
            #validateBookingRequest,
            [],
            {#bookingRequest: bookingRequest},
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, bool>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i10.TimeSlot>>>
      getChefScheduleForWeek({
    required String? chefId,
    required DateTime? weekStart,
  }) =>
          (super.noSuchMethod(
            Invocation.method(
              #getChefScheduleForWeek,
              [],
              {
                #chefId: chefId,
                #weekStart: weekStart,
              },
            ),
            returnValue:
                _i4.Future<_i2.Either<_i5.Failure, List<_i10.TimeSlot>>>.value(
                    _FakeEither_0<_i5.Failure, List<_i10.TimeSlot>>(
              this,
              Invocation.method(
                #getChefScheduleForWeek,
                [],
                {
                  #chefId: chefId,
                  #weekStart: weekStart,
                },
              ),
            )),
            returnValueForMissingStub:
                _i4.Future<_i2.Either<_i5.Failure, List<_i10.TimeSlot>>>.value(
                    _FakeEither_0<_i5.Failure, List<_i10.TimeSlot>>(
              this,
              Invocation.method(
                #getChefScheduleForWeek,
                [],
                {
                  #chefId: chefId,
                  #weekStart: weekStart,
                },
              ),
            )),
          ) as _i4.Future<_i2.Either<_i5.Failure, List<_i10.TimeSlot>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i10.TimeSlot?>> getNextAvailableSlot({
    required String? chefId,
    required DateTime? afterDate,
    required Duration? duration,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getNextAvailableSlot,
          [],
          {
            #chefId: chefId,
            #afterDate: afterDate,
            #duration: duration,
          },
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i10.TimeSlot?>>.value(
            _FakeEither_0<_i5.Failure, _i10.TimeSlot?>(
          this,
          Invocation.method(
            #getNextAvailableSlot,
            [],
            {
              #chefId: chefId,
              #afterDate: afterDate,
              #duration: duration,
            },
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, _i10.TimeSlot?>>.value(
                _FakeEither_0<_i5.Failure, _i10.TimeSlot?>(
          this,
          Invocation.method(
            #getNextAvailableSlot,
            [],
            {
              #chefId: chefId,
              #afterDate: afterDate,
              #duration: duration,
            },
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i10.TimeSlot?>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, bool>> isChefAvailable({
    required String? chefId,
    required DateTime? startTime,
    required DateTime? endTime,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #isChefAvailable,
          [],
          {
            #chefId: chefId,
            #startTime: startTime,
            #endTime: endTime,
          },
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, bool>>.value(
            _FakeEither_0<_i5.Failure, bool>(
          this,
          Invocation.method(
            #isChefAvailable,
            [],
            {
              #chefId: chefId,
              #startTime: startTime,
              #endTime: endTime,
            },
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, bool>>.value(
                _FakeEither_0<_i5.Failure, bool>(
          this,
          Invocation.method(
            #isChefAvailable,
            [],
            {
              #chefId: chefId,
              #startTime: startTime,
              #endTime: endTime,
            },
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, bool>>);
}

/// A class which mocks [BookingAvailabilityService].
///
/// See the documentation for Mockito's code generation for more information.
class MockBookingAvailabilityService extends _i1.Mock
    implements _i11.BookingAvailabilityService {
  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i10.TimeSlot>>>
      getAvailableTimeSlots({
    required String? chefId,
    required DateTime? date,
    required Duration? duration,
    required int? numberOfGuests,
  }) =>
          (super.noSuchMethod(
            Invocation.method(
              #getAvailableTimeSlots,
              [],
              {
                #chefId: chefId,
                #date: date,
                #duration: duration,
                #numberOfGuests: numberOfGuests,
              },
            ),
            returnValue:
                _i4.Future<_i2.Either<_i5.Failure, List<_i10.TimeSlot>>>.value(
                    _FakeEither_0<_i5.Failure, List<_i10.TimeSlot>>(
              this,
              Invocation.method(
                #getAvailableTimeSlots,
                [],
                {
                  #chefId: chefId,
                  #date: date,
                  #duration: duration,
                  #numberOfGuests: numberOfGuests,
                },
              ),
            )),
            returnValueForMissingStub:
                _i4.Future<_i2.Either<_i5.Failure, List<_i10.TimeSlot>>>.value(
                    _FakeEither_0<_i5.Failure, List<_i10.TimeSlot>>(
              this,
              Invocation.method(
                #getAvailableTimeSlots,
                [],
                {
                  #chefId: chefId,
                  #date: date,
                  #duration: duration,
                  #numberOfGuests: numberOfGuests,
                },
              ),
            )),
          ) as _i4.Future<_i2.Either<_i5.Failure, List<_i10.TimeSlot>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, bool>> checkBookingConflict({
    required String? chefId,
    required DateTime? date,
    required String? startTime,
    required String? endTime,
    String? excludeBookingId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #checkBookingConflict,
          [],
          {
            #chefId: chefId,
            #date: date,
            #startTime: startTime,
            #endTime: endTime,
            #excludeBookingId: excludeBookingId,
          },
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, bool>>.value(
            _FakeEither_0<_i5.Failure, bool>(
          this,
          Invocation.method(
            #checkBookingConflict,
            [],
            {
              #chefId: chefId,
              #date: date,
              #startTime: startTime,
              #endTime: endTime,
              #excludeBookingId: excludeBookingId,
            },
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, bool>>.value(
                _FakeEither_0<_i5.Failure, bool>(
          this,
          Invocation.method(
            #checkBookingConflict,
            [],
            {
              #chefId: chefId,
              #date: date,
              #startTime: startTime,
              #endTime: endTime,
              #excludeBookingId: excludeBookingId,
            },
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, bool>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i10.TimeSlot>>>
      getChefScheduleForWeek({
    required String? chefId,
    required DateTime? weekStart,
  }) =>
          (super.noSuchMethod(
            Invocation.method(
              #getChefScheduleForWeek,
              [],
              {
                #chefId: chefId,
                #weekStart: weekStart,
              },
            ),
            returnValue:
                _i4.Future<_i2.Either<_i5.Failure, List<_i10.TimeSlot>>>.value(
                    _FakeEither_0<_i5.Failure, List<_i10.TimeSlot>>(
              this,
              Invocation.method(
                #getChefScheduleForWeek,
                [],
                {
                  #chefId: chefId,
                  #weekStart: weekStart,
                },
              ),
            )),
            returnValueForMissingStub:
                _i4.Future<_i2.Either<_i5.Failure, List<_i10.TimeSlot>>>.value(
                    _FakeEither_0<_i5.Failure, List<_i10.TimeSlot>>(
              this,
              Invocation.method(
                #getChefScheduleForWeek,
                [],
                {
                  #chefId: chefId,
                  #weekStart: weekStart,
                },
              ),
            )),
          ) as _i4.Future<_i2.Either<_i5.Failure, List<_i10.TimeSlot>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, bool>> validateRecurringBookingPattern({
    required String? chefId,
    required _i6.RecurrencePattern? pattern,
    required String? startTime,
    required String? endTime,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #validateRecurringBookingPattern,
          [],
          {
            #chefId: chefId,
            #pattern: pattern,
            #startTime: startTime,
            #endTime: endTime,
          },
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, bool>>.value(
            _FakeEither_0<_i5.Failure, bool>(
          this,
          Invocation.method(
            #validateRecurringBookingPattern,
            [],
            {
              #chefId: chefId,
              #pattern: pattern,
              #startTime: startTime,
              #endTime: endTime,
            },
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, bool>>.value(
                _FakeEither_0<_i5.Failure, bool>(
          this,
          Invocation.method(
            #validateRecurringBookingPattern,
            [],
            {
              #chefId: chefId,
              #pattern: pattern,
              #startTime: startTime,
              #endTime: endTime,
            },
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, bool>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i10.TimeSlot?>> getNextAvailableSlot({
    required String? chefId,
    required DateTime? afterDate,
    required Duration? duration,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getNextAvailableSlot,
          [],
          {
            #chefId: chefId,
            #afterDate: afterDate,
            #duration: duration,
          },
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i10.TimeSlot?>>.value(
            _FakeEither_0<_i5.Failure, _i10.TimeSlot?>(
          this,
          Invocation.method(
            #getNextAvailableSlot,
            [],
            {
              #chefId: chefId,
              #afterDate: afterDate,
              #duration: duration,
            },
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, _i10.TimeSlot?>>.value(
                _FakeEither_0<_i5.Failure, _i10.TimeSlot?>(
          this,
          Invocation.method(
            #getNextAvailableSlot,
            [],
            {
              #chefId: chefId,
              #afterDate: afterDate,
              #duration: duration,
            },
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i10.TimeSlot?>>);
}
