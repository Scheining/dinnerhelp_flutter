// Mocks generated by Mockito 5.4.6 from annotations
// in homechef/test/unit/booking/booking_availability_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:homechef/core/error/failures.dart' as _i5;
import 'package:homechef/features/booking/domain/entities/booking_request.dart'
    as _i13;
import 'package:homechef/features/booking/domain/entities/chef_alternative.dart'
    as _i12;
import 'package:homechef/features/booking/domain/entities/chef_availability.dart'
    as _i8;
import 'package:homechef/features/booking/domain/entities/chef_schedule_settings.dart'
    as _i9;
import 'package:homechef/features/booking/domain/entities/chef_time_off.dart'
    as _i7;
import 'package:homechef/features/booking/domain/entities/chef_working_hours.dart'
    as _i6;
import 'package:homechef/features/booking/domain/entities/time_slot.dart'
    as _i10;
import 'package:homechef/features/booking/domain/services/chef_schedule_service.dart'
    as _i3;
import 'package:homechef/features/booking/domain/services/chef_unavailability_handler.dart'
    as _i11;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ChefScheduleService].
///
/// See the documentation for Mockito's code generation for more information.
class MockChefScheduleService extends _i1.Mock
    implements _i3.ChefScheduleService {
  MockChefScheduleService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.ChefWorkingHours?>> getWorkingHours(
    String? chefId,
    int? dayOfWeek,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getWorkingHours,
          [
            chefId,
            dayOfWeek,
          ],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, _i6.ChefWorkingHours?>>.value(
                _FakeEither_0<_i5.Failure, _i6.ChefWorkingHours?>(
          this,
          Invocation.method(
            #getWorkingHours,
            [
              chefId,
              dayOfWeek,
            ],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.ChefWorkingHours?>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.ChefWorkingHours>>>
      getAllWorkingHours(String? chefId) => (super.noSuchMethod(
            Invocation.method(
              #getAllWorkingHours,
              [chefId],
            ),
            returnValue: _i4.Future<
                    _i2.Either<_i5.Failure, List<_i6.ChefWorkingHours>>>.value(
                _FakeEither_0<_i5.Failure, List<_i6.ChefWorkingHours>>(
              this,
              Invocation.method(
                #getAllWorkingHours,
                [chefId],
              ),
            )),
          ) as _i4.Future<_i2.Either<_i5.Failure, List<_i6.ChefWorkingHours>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i7.ChefTimeOff>>> getTimeOffPeriods(
    String? chefId,
    DateTime? startDate,
    DateTime? endDate,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTimeOffPeriods,
          [
            chefId,
            startDate,
            endDate,
          ],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, List<_i7.ChefTimeOff>>>.value(
                _FakeEither_0<_i5.Failure, List<_i7.ChefTimeOff>>(
          this,
          Invocation.method(
            #getTimeOffPeriods,
            [
              chefId,
              startDate,
              endDate,
            ],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, List<_i7.ChefTimeOff>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i8.ChefAvailability>>>
      getSpecificAvailability(
    String? chefId,
    DateTime? date,
  ) =>
          (super.noSuchMethod(
            Invocation.method(
              #getSpecificAvailability,
              [
                chefId,
                date,
              ],
            ),
            returnValue: _i4.Future<
                    _i2.Either<_i5.Failure, List<_i8.ChefAvailability>>>.value(
                _FakeEither_0<_i5.Failure, List<_i8.ChefAvailability>>(
              this,
              Invocation.method(
                #getSpecificAvailability,
                [
                  chefId,
                  date,
                ],
              ),
            )),
          ) as _i4.Future<_i2.Either<_i5.Failure, List<_i8.ChefAvailability>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, Duration>> calculateBufferTime(
          String? chefId) =>
      (super.noSuchMethod(
        Invocation.method(
          #calculateBufferTime,
          [chefId],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, Duration>>.value(
            _FakeEither_0<_i5.Failure, Duration>(
          this,
          Invocation.method(
            #calculateBufferTime,
            [chefId],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, Duration>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, int>> getMaxBookingsPerDay(
          String? chefId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMaxBookingsPerDay,
          [chefId],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, int>>.value(
            _FakeEither_0<_i5.Failure, int>(
          this,
          Invocation.method(
            #getMaxBookingsPerDay,
            [chefId],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, int>>);

  @override
  _i4.Future<
      _i2.Either<_i5.Failure, _i9.ChefScheduleSettings>> getScheduleSettings(
          String? chefId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getScheduleSettings,
          [chefId],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, _i9.ChefScheduleSettings>>.value(
                _FakeEither_0<_i5.Failure, _i9.ChefScheduleSettings>(
          this,
          Invocation.method(
            #getScheduleSettings,
            [chefId],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i9.ChefScheduleSettings>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, bool>> isWorkingDay(
    String? chefId,
    DateTime? date,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #isWorkingDay,
          [
            chefId,
            date,
          ],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, bool>>.value(
            _FakeEither_0<_i5.Failure, bool>(
          this,
          Invocation.method(
            #isWorkingDay,
            [
              chefId,
              date,
            ],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, bool>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i10.TimeSlot>>>
      getEffectiveWorkingHours(
    String? chefId,
    DateTime? date,
  ) =>
          (super.noSuchMethod(
            Invocation.method(
              #getEffectiveWorkingHours,
              [
                chefId,
                date,
              ],
            ),
            returnValue:
                _i4.Future<_i2.Either<_i5.Failure, List<_i10.TimeSlot>>>.value(
                    _FakeEither_0<_i5.Failure, List<_i10.TimeSlot>>(
              this,
              Invocation.method(
                #getEffectiveWorkingHours,
                [
                  chefId,
                  date,
                ],
              ),
            )),
          ) as _i4.Future<_i2.Either<_i5.Failure, List<_i10.TimeSlot>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, void>> updateWorkingHours(
    String? chefId,
    List<_i6.ChefWorkingHours>? workingHours,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateWorkingHours,
          [
            chefId,
            workingHours,
          ],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, void>>.value(
            _FakeEither_0<_i5.Failure, void>(
          this,
          Invocation.method(
            #updateWorkingHours,
            [
              chefId,
              workingHours,
            ],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, void>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, void>> addTimeOff(
    String? chefId,
    _i7.ChefTimeOff? timeOff,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addTimeOff,
          [
            chefId,
            timeOff,
          ],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, void>>.value(
            _FakeEither_0<_i5.Failure, void>(
          this,
          Invocation.method(
            #addTimeOff,
            [
              chefId,
              timeOff,
            ],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, void>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, void>> updateScheduleSettings(
    String? chefId,
    _i9.ChefScheduleSettings? settings,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateScheduleSettings,
          [
            chefId,
            settings,
          ],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, void>>.value(
            _FakeEither_0<_i5.Failure, void>(
          this,
          Invocation.method(
            #updateScheduleSettings,
            [
              chefId,
              settings,
            ],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, void>>);
}

/// A class which mocks [ChefUnavailabilityHandler].
///
/// See the documentation for Mockito's code generation for more information.
class MockChefUnavailabilityHandler extends _i1.Mock
    implements _i11.ChefUnavailabilityHandler {
  MockChefUnavailabilityHandler() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i11.UnavailabilityResolution>>
      handleChefUnavailability({
    required String? bookingId,
    required _i12.UnavailabilityReason? reason,
  }) =>
          (super.noSuchMethod(
            Invocation.method(
              #handleChefUnavailability,
              [],
              {
                #bookingId: bookingId,
                #reason: reason,
              },
            ),
            returnValue: _i4.Future<
                    _i2
                    .Either<_i5.Failure, _i11.UnavailabilityResolution>>.value(
                _FakeEither_0<_i5.Failure, _i11.UnavailabilityResolution>(
              this,
              Invocation.method(
                #handleChefUnavailability,
                [],
                {
                  #bookingId: bookingId,
                  #reason: reason,
                },
              ),
            )),
          ) as _i4
              .Future<_i2.Either<_i5.Failure, _i11.UnavailabilityResolution>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i12.ChefAlternative>>>
      findAlternativeChefs({
    required _i13.BookingRequest? originalBooking,
    required double? maxDistanceKm,
    int? maxAlternatives = 5,
  }) =>
          (super.noSuchMethod(
            Invocation.method(
              #findAlternativeChefs,
              [],
              {
                #originalBooking: originalBooking,
                #maxDistanceKm: maxDistanceKm,
                #maxAlternatives: maxAlternatives,
              },
            ),
            returnValue: _i4.Future<
                    _i2.Either<_i5.Failure, List<_i12.ChefAlternative>>>.value(
                _FakeEither_0<_i5.Failure, List<_i12.ChefAlternative>>(
              this,
              Invocation.method(
                #findAlternativeChefs,
                [],
                {
                  #originalBooking: originalBooking,
                  #maxDistanceKm: maxDistanceKm,
                  #maxAlternatives: maxAlternatives,
                },
              ),
            )),
          ) as _i4.Future<_i2.Either<_i5.Failure, List<_i12.ChefAlternative>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i11.ReschedulingOption>>>
      suggestRescheduling({
    required String? bookingId,
    required List<DateTime>? preferredDates,
  }) =>
          (super.noSuchMethod(
            Invocation.method(
              #suggestRescheduling,
              [],
              {
                #bookingId: bookingId,
                #preferredDates: preferredDates,
              },
            ),
            returnValue: _i4.Future<
                    _i2
                    .Either<_i5.Failure, List<_i11.ReschedulingOption>>>.value(
                _FakeEither_0<_i5.Failure, List<_i11.ReschedulingOption>>(
              this,
              Invocation.method(
                #suggestRescheduling,
                [],
                {
                  #bookingId: bookingId,
                  #preferredDates: preferredDates,
                },
              ),
            )),
          ) as _i4
              .Future<_i2.Either<_i5.Failure, List<_i11.ReschedulingOption>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>> notifyAffectedParties({
    required String? bookingId,
    required _i11.UnavailabilityResolution? solution,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #notifyAffectedParties,
          [],
          {
            #bookingId: bookingId,
            #solution: solution,
          },
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>>.value(
            _FakeEither_0<_i5.Failure, _i2.Unit>(
          this,
          Invocation.method(
            #notifyAffectedParties,
            [],
            {
              #bookingId: bookingId,
              #solution: solution,
            },
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i11.EmergencyCancellationResult>>
      processEmergencyCancellation({
    required String? bookingId,
    required _i12.UnavailabilityReason? reason,
  }) =>
          (super.noSuchMethod(
            Invocation.method(
              #processEmergencyCancellation,
              [],
              {
                #bookingId: bookingId,
                #reason: reason,
              },
            ),
            returnValue: _i4.Future<
                    _i2.Either<_i5.Failure,
                        _i11.EmergencyCancellationResult>>.value(
                _FakeEither_0<_i5.Failure, _i11.EmergencyCancellationResult>(
              this,
              Invocation.method(
                #processEmergencyCancellation,
                [],
                {
                  #bookingId: bookingId,
                  #reason: reason,
                },
              ),
            )),
          ) as _i4.Future<
              _i2.Either<_i5.Failure, _i11.EmergencyCancellationResult>>);
}
